Starting audit...
[ERROR] /home/student/santaclaus-acs-part1/./src/checker/Checker.java:16:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/gifts/Gift.java:16:5: Class 'Gift' looks like designed for extension (can be subclassed), but the method 'getProductName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Gift' final or making the method 'getProductName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/gifts/Gift.java:20:5: Class 'Gift' looks like designed for extension (can be subclassed), but the method 'getPrice' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Gift' final or making the method 'getPrice' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/gifts/Gift.java:24:5: Class 'Gift' looks like designed for extension (can be subclassed), but the method 'getCategory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Gift' final or making the method 'getCategory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/gifts/Gift.java:28:5: Class 'Gift' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Gift' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/gifts/Gift.java:30:20: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/gifts/Gift.java:31:54: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/gifts/Gift.java:32:36: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/gifts/Gift.java:33:50: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/TeenStrategy.java:9:25: Parameter age should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/TeenStrategy.java:9:34: Parameter niceScore should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/TeenStrategy.java:14:5: Class 'TeenStrategy' looks like designed for extension (can be subclassed), but the method 'getNiceScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TeenStrategy' final or making the method 'getNiceScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/TeenStrategy.java:18:5: Class 'TeenStrategy' looks like designed for extension (can be subclassed), but the method 'getAge' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TeenStrategy' final or making the method 'getAge' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/TeenStrategy.java:22:5: Class 'TeenStrategy' looks like designed for extension (can be subclassed), but the method 'getAverageScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'TeenStrategy' final or making the method 'getAverageScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/AverageScoreStrategyFactory.java:6:5: Class 'AverageScoreStrategyFactory' looks like designed for extension (can be subclassed), but the method 'createStrategy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AverageScoreStrategyFactory' final or making the method 'createStrategy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/AverageScoreStrategyFactory.java:6:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/AverageScoreStrategyFactory.java:8:19: '5' is a magic number. [MagicNumber]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/AverageScoreStrategyFactory.java:10:27: '5' is a magic number. [MagicNumber]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/AverageScoreStrategyFactory.java:10:38: '12' is a magic number. [MagicNumber]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/AverageScoreStrategyFactory.java:12:27: '12' is a magic number. [MagicNumber]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/AverageScoreStrategyFactory.java:12:40: '18' is a magic number. [MagicNumber]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/YoungAdultStrategy.java:9:31: Parameter age should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/YoungAdultStrategy.java:9:40: Parameter niceScore should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/YoungAdultStrategy.java:14:5: Class 'YoungAdultStrategy' looks like designed for extension (can be subclassed), but the method 'getNiceScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'YoungAdultStrategy' final or making the method 'getNiceScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/YoungAdultStrategy.java:18:5: Class 'YoungAdultStrategy' looks like designed for extension (can be subclassed), but the method 'getAge' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'YoungAdultStrategy' final or making the method 'getAge' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/YoungAdultStrategy.java:22:5: Class 'YoungAdultStrategy' looks like designed for extension (can be subclassed), but the method 'getAverageScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'YoungAdultStrategy' final or making the method 'getAverageScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/KidStrategy.java:9:24: Parameter age should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/KidStrategy.java:9:33: Parameter niceScore should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/KidStrategy.java:14:5: Class 'KidStrategy' looks like designed for extension (can be subclassed), but the method 'getNiceScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'KidStrategy' final or making the method 'getNiceScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/KidStrategy.java:18:5: Class 'KidStrategy' looks like designed for extension (can be subclassed), but the method 'getAge' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'KidStrategy' final or making the method 'getAge' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/KidStrategy.java:22:5: Class 'KidStrategy' looks like designed for extension (can be subclassed), but the method 'getAverageScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'KidStrategy' final or making the method 'getAverageScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/AverageScoreStrategy.java:4:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/BabyStrategy.java:9:25: Parameter age should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/BabyStrategy.java:9:34: Parameter niceScore should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/BabyStrategy.java:14:5: Class 'BabyStrategy' looks like designed for extension (can be subclassed), but the method 'getNiceScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BabyStrategy' final or making the method 'getNiceScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/BabyStrategy.java:18:5: Class 'BabyStrategy' looks like designed for extension (can be subclassed), but the method 'getAge' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BabyStrategy' final or making the method 'getAge' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/BabyStrategy.java:22:5: Class 'BabyStrategy' looks like designed for extension (can be subclassed), but the method 'getAverageScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'BabyStrategy' final or making the method 'getAverageScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/scores/BabyStrategy.java:24:16: '10.0' is a magic number. [MagicNumber]
[ERROR] /home/student/santaclaus-acs-part1/./src/memory/InitialData.java:17:24: Parameter childrenList should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/memory/InitialData.java:17:50: Parameter giftsList should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/memory/InitialData.java:22:5: Class 'InitialData' looks like designed for extension (can be subclassed), but the method 'getChildrenList' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InitialData' final or making the method 'getChildrenList' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/memory/InitialData.java:26:5: Class 'InitialData' looks like designed for extension (can be subclassed), but the method 'getGiftsList' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InitialData' final or making the method 'getGiftsList' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/memory/InitialData.java:30:5: Class 'InitialData' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InitialData' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/memory/InitialData.java:32:20: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/memory/InitialData.java:33:48: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/memory/InitialData.java:34:44: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/memory/AnnualChanges.java:3:8: Unused import - fileio.ChangeOfTheYearInput. [UnusedImports]
[ERROR] /home/student/santaclaus-acs-part1/./src/memory/AnnualChanges.java:15:26: Parameter changes should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/memory/AnnualChanges.java:19:5: Class 'AnnualChanges' looks like designed for extension (can be subclassed), but the method 'getChanges' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AnnualChanges' final or making the method 'getChanges' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/memory/AnnualChanges.java:23:5: Class 'AnnualChanges' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AnnualChanges' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/memory/AnnualChanges.java:25:20: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/memory/AnnualChanges.java:26:38: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/utils/Utils.java:7:1: Class Utils should be declared as final. [FinalClass]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:5:14: Using the '.*' form of import should be avoided - fileio.*. [AvoidStarImport]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:15:17: Using the '.*' form of import should be avoided - java.util.*. [AvoidStarImport]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:18:1: Class Santa should be declared as final. [FinalClass]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:33:33: Parameter santasBudget should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:37:28: Parameter noYears should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:52:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:59:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:60:9: 'if' construct must use '{}'s. [NeedBraces]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:68:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:69:53: '18' is a magic number. [MagicNumber]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:72:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:78:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:80: Line is longer than 100 characters (found 117). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:82: Line is longer than 100 characters (found 105). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:85:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:128:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:138:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:157:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:168:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:176:72: '&&' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:189:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:203:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:238:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:238:32: Parameter input should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:249:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:249:34: Parameter input should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:270:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:270:41: Parameter childrenInput should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:271:26: 'children' hides a field. [HiddenField]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:289:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:289:37: Parameter giftsInput should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:305:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:305:47: Parameter updatesInput should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:321:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:355:31: Parameter actualYear should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:359:35: Parameter availableGifts should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:363:29: Parameter children should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:369:20: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:370:38: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:371:50: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:372:48: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/workshop/Santa.java:373:52: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/main/Main.java:4:8: Unused import - checker.Checkstyle. [UnusedImports]
[ERROR] /home/student/santaclaus-acs-part1/./src/main/Main.java:11:8: Unused import - org.json.simple.JSONArray. [UnusedImports]
[ERROR] /home/student/santaclaus-acs-part1/./src/main/Main.java:47:56: '10' is a magic number. [MagicNumber]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/ChildUpdates.java:18:5: Class 'ChildUpdates' looks like designed for extension (can be subclassed), but the method 'getGiftsPreferences' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChildUpdates' final or making the method 'getGiftsPreferences' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/ChildUpdates.java:22:5: Class 'ChildUpdates' looks like designed for extension (can be subclassed), but the method 'getNiceScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChildUpdates' final or making the method 'getNiceScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/ChildUpdates.java:26:5: Class 'ChildUpdates' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChildUpdates' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/ChildUpdates.java:30:5: Class 'ChildUpdates' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChildUpdates' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/ChildUpdates.java:32:20: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/ChildUpdates.java:33:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/ChildUpdates.java:34:44: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/ChildUpdates.java:35:58: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:3:8: Unused import - fileio.ChildrenInput. [UnusedImports]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:10:8: Unused import - java.util.List. [UnusedImports]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:60:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:64:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getLastName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getLastName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:68:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getFirstName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getFirstName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:72:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getAge' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getAge' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:76:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'setAge' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'setAge' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:76:39: '{' at column 39 should have line break after. [LeftCurly]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:78:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getCity' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getCity' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:82:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getNiceScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getNiceScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:86:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getGiftsPreferences' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getGiftsPreferences' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:90:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getAverageScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getAverageScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:94:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getAssignedBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getAssignedBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:98:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'setBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'setBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:98:27: Parameter budget should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:102:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getStrategy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getStrategy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:106:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'setAverageScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'setAverageScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:106:33: Parameter averageScore should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:110:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'setStrategy' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'setStrategy' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:110:29: Parameter strategy should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:114:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getReceivedGifts' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getReceivedGifts' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:118:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'setReceivedGifts' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'setReceivedGifts' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:118:34: Parameter receivedGifts should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:122:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getInitialBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getInitialBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:126:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'setInitialBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'setInitialBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:126:34: Parameter initialBudget should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:130:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'getJSON' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'getJSON' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:130:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:170:5: Class 'Child' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Child' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:172:20: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:173:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:174:50: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:175:52: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:176:42: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:177:32: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:178:58: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:179:50: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:180:51: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:181:53: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/children/Child.java:182:52: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/updates/ChangeOfTheYear.java:7:8: Unused import - java.util.ArrayList. [UnusedImports]
[ERROR] /home/student/santaclaus-acs-part1/./src/updates/ChangeOfTheYear.java:26:5: Class 'ChangeOfTheYear' looks like designed for extension (can be subclassed), but the method 'getNewSantaBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChangeOfTheYear' final or making the method 'getNewSantaBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/updates/ChangeOfTheYear.java:30:5: Class 'ChangeOfTheYear' looks like designed for extension (can be subclassed), but the method 'getNewGifts' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChangeOfTheYear' final or making the method 'getNewGifts' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/updates/ChangeOfTheYear.java:34:5: Class 'ChangeOfTheYear' looks like designed for extension (can be subclassed), but the method 'getNewChildren' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChangeOfTheYear' final or making the method 'getNewChildren' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/updates/ChangeOfTheYear.java:38:5: Class 'ChangeOfTheYear' looks like designed for extension (can be subclassed), but the method 'getNewUpdates' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChangeOfTheYear' final or making the method 'getNewUpdates' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/updates/ChangeOfTheYear.java:42:5: Class 'ChangeOfTheYear' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChangeOfTheYear' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/updates/ChangeOfTheYear.java:44:20: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/updates/ChangeOfTheYear.java:45:52: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/updates/ChangeOfTheYear.java:46:42: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/updates/ChangeOfTheYear.java:47:48: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/updates/ChangeOfTheYear.java:48:46: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/Input.java:19:5: Class 'Input' looks like designed for extension (can be subclassed), but the method 'getAnnualChanges' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Input' final or making the method 'getAnnualChanges' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/Input.java:23:5: Class 'Input' looks like designed for extension (can be subclassed), but the method 'getSantasBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Input' final or making the method 'getSantasBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/Input.java:27:5: Class 'Input' looks like designed for extension (can be subclassed), but the method 'getInitialData' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Input' final or making the method 'getInitialData' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/Input.java:31:5: Class 'Input' looks like designed for extension (can be subclassed), but the method 'getNoYears' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Input' final or making the method 'getNoYears' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/Input.java:35:5: Class 'Input' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Input' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/Input.java:37:20: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/Input.java:38:38: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/Input.java:39:50: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/Input.java:40:48: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/Input.java:41:52: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/GiftInput.java:16:5: Class 'GiftInput' looks like designed for extension (can be subclassed), but the method 'getProductName' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GiftInput' final or making the method 'getProductName' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/GiftInput.java:20:5: Class 'GiftInput' looks like designed for extension (can be subclassed), but the method 'getPrice' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GiftInput' final or making the method 'getPrice' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/GiftInput.java:24:5: Class 'GiftInput' looks like designed for extension (can be subclassed), but the method 'getCategory' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GiftInput' final or making the method 'getCategory' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/GiftInput.java:28:5: Class 'GiftInput' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'GiftInput' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/GiftInput.java:30:20: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/GiftInput.java:31:54: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/GiftInput.java:32:36: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/GiftInput.java:33:50: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InitialDataInput.java:16:5: Class 'InitialDataInput' looks like designed for extension (can be subclassed), but the method 'getChildrenList' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InitialDataInput' final or making the method 'getChildrenList' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InitialDataInput.java:20:5: Class 'InitialDataInput' looks like designed for extension (can be subclassed), but the method 'getGiftsList' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InitialDataInput' final or making the method 'getGiftsList' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InitialDataInput.java:24:5: Class 'InitialDataInput' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InitialDataInput' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InitialDataInput.java:26:20: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InitialDataInput.java:27:48: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InitialDataInput.java:28:44: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:14:15: Unused import - common.Constants.ANGEL_NUMBER. [UnusedImports]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:19:48: '{' at column 48 should have line break after. [LeftCurly]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:21:5: Class 'InputLoader' looks like designed for extension (can be subclassed), but the method 'getInputPath' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputLoader' final or making the method 'getInputPath' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:25:5: Class 'InputLoader' looks like designed for extension (can be subclassed), but the method 'readData' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'InputLoader' final or making the method 'readData' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:25:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:53: Line is longer than 100 characters (found 103). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:54: Line is longer than 100 characters (found 114). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:79: Line is longer than 100 characters (found 123). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:81: Line is longer than 100 characters (found 105). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:82: Line is longer than 100 characters (found 113). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:87: Line is longer than 100 characters (found 103). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:99: Line is longer than 100 characters (found 108). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:100: Line is longer than 100 characters (found 119). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:107: Line is longer than 100 characters (found 109). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:109: Line is longer than 100 characters (found 129). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:113: Line is longer than 100 characters (found 105). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:114: Line is longer than 100 characters (found 114). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:115: Line is longer than 100 characters (found 125). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/InputLoader.java:120: Line is longer than 100 characters (found 108). [LineLength]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/Writer.java:3:8: Unused import - org.json.simple.JSONArray. [UnusedImports]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/Writer.java:16:5: Class 'Writer' looks like designed for extension (can be subclassed), but the method 'closeJSON' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'Writer' final or making the method 'closeJSON' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/Writer.java:16:5: Missing a Javadoc comment. [MissingJavadocMethod]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/AnnualChangesInput.java:8:31: Parameter changes should be final. [FinalParameters]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/AnnualChangesInput.java:12:5: Class 'AnnualChangesInput' looks like designed for extension (can be subclassed), but the method 'getChanges' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AnnualChangesInput' final or making the method 'getChanges' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/AnnualChangesInput.java:16:5: Class 'AnnualChangesInput' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'AnnualChangesInput' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/AnnualChangesInput.java:18:20: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/AnnualChangesInput.java:19:38: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChangeOfTheYearInput.java:22:5: Class 'ChangeOfTheYearInput' looks like designed for extension (can be subclassed), but the method 'getNewSantaBudget' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChangeOfTheYearInput' final or making the method 'getNewSantaBudget' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChangeOfTheYearInput.java:26:5: Class 'ChangeOfTheYearInput' looks like designed for extension (can be subclassed), but the method 'getNewChildren' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChangeOfTheYearInput' final or making the method 'getNewChildren' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChangeOfTheYearInput.java:30:5: Class 'ChangeOfTheYearInput' looks like designed for extension (can be subclassed), but the method 'getNewUpdates' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChangeOfTheYearInput' final or making the method 'getNewUpdates' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChangeOfTheYearInput.java:34:5: Class 'ChangeOfTheYearInput' looks like designed for extension (can be subclassed), but the method 'getNewGifts' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChangeOfTheYearInput' final or making the method 'getNewGifts' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChangeOfTheYearInput.java:38:5: Class 'ChangeOfTheYearInput' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChangeOfTheYearInput' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChangeOfTheYearInput.java:40:20: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChangeOfTheYearInput.java:41:52: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChangeOfTheYearInput.java:42:42: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChangeOfTheYearInput.java:43:48: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChangeOfTheYearInput.java:44:46: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenInput.java:1: File does not end with a newline. [NewlineAtEndOfFile]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenInput.java:60:20: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenInput.java:61:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenInput.java:62:50: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenInput.java:63:52: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenInput.java:64:32: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenInput.java:65:42: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenInput.java:66:44: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenInput.java:67:58: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenUpdatesInput.java:18:5: Class 'ChildrenUpdatesInput' looks like designed for extension (can be subclassed), but the method 'getGiftsPreferences' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChildrenUpdatesInput' final or making the method 'getGiftsPreferences' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenUpdatesInput.java:22:5: Class 'ChildrenUpdatesInput' looks like designed for extension (can be subclassed), but the method 'getNiceScore' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChildrenUpdatesInput' final or making the method 'getNiceScore' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenUpdatesInput.java:26:5: Class 'ChildrenUpdatesInput' looks like designed for extension (can be subclassed), but the method 'getId' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChildrenUpdatesInput' final or making the method 'getId' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenUpdatesInput.java:30:5: Class 'ChildrenUpdatesInput' looks like designed for extension (can be subclassed), but the method 'toString' does not have javadoc that explains how to do that safely. If class is not designed for extension consider making the class 'ChildrenUpdatesInput' final or making the method 'toString' static/final/abstract/empty, or adding allowed annotation for the method. [DesignForExtension]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenUpdatesInput.java:32:20: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenUpdatesInput.java:33:28: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenUpdatesInput.java:34:44: '+' should be on a new line. [OperatorWrap]
[ERROR] /home/student/santaclaus-acs-part1/./src/fileio/ChildrenUpdatesInput.java:35:58: '+' should be on a new line. [OperatorWrap]
Audit done.
Checkstyle ends with 235 errors.
